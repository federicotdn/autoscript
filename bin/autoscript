#!/usr/bin/env bash
# autoscript: file management for script(1)

readonly storage_dir="${XDG_CONFIG_HOME:-"$HOME/.config"}/autoscript"
readonly version="0.1.2"
readonly storage_perms="700"
readonly file_perms="600"

set -e

function assert_command_exists() {
    if ! command -v "$1" > /dev/null 2>&1; then
        echo "Command '$1' is required." >&2
        exit 1
    fi
}

function ensure_storage_dir() {
    if [[ -d "$storage_dir" ]]; then
        if [[ $(stat -c "%a" "$storage_dir") == "$storage_perms" ]]; then
            # Storage dir exists and has correct permissions
            return
        else
            echo "Storage directory exists, but has incorrect permissions." >&2
            exit 1
        fi
    fi

    mkdir "$storage_dir" -m "$storage_perms"
}

function print_usage() {
    printf "usage: autoscript [-v] [-h] <command> [-i <id>]\n\n"
    printf "Available commands:\n"
    printf "   record\n"
    printf "   replay\n"
    printf "   resume\n"
    printf "   delete\n"
    printf "   list\n"
    printf "   context\n"
}

function create_file() {
    if [[ -f "$1" ]]; then
        echo "File already exists: $1" >&2
        exit 1
    fi
    install -m "$file_perms" /dev/null "$1"
}

function record_metatada() {
    # Write context information to metadata file
    local mdfile="$1"
    local message="$2"

    {
        echo "DATE=$(date "+%Y-%m-%d %H:%M")"
        echo "SYSTEM=$(uname -r)"
        echo "USER=$(whoami)"
        echo "MESSAGE=$message"
    } >> "$mdfile"
}

function record_mode() {
    ensure_storage_dir
    
    local quiet_on="$1"
    local timings_on="$2"
    local message="$3"
    local next_id=1

    # Search for the next ID to use by parsing filenames
    shopt -s nullglob
    for filename in "$storage_dir"/*.typescript; do
        local id

        id=$(basename "$filename" | grep -Eo "^[0-9]+")
        if [[ $? -eq 0 ]] && ((id >= next_id)); then
            ((next_id = id + 1))
        fi
    done
    shopt -u nullglob

    # Prepare typescript, metadata and timing files
    local typescript="$storage_dir"/"$next_id".typescript
    local timings="$storage_dir"/"$next_id".timings
    local mdfile="$storage_dir"/"$next_id".metadata.txt
    
    create_file "$typescript"
    create_file "$mdfile"

    if [[ "$timings_on" == "true" ]]; then
        create_file "$timings"
    fi

    record_metatada "$mdfile" "$message"

    if [[ "$quiet_on" == "false" ]]; then
        echo "This session is being recorded by autoscript."
        echo "Script file: $typescript"
        echo "Use 'exit' to stop recording"
    fi

    if [[ "$timings_on" == "false" ]]; then
        timings="/dev/null"
    fi

    # Start script(1)
    AUTOSCRIPT_ID="$next_id" script -f -q -t "$typescript" 2> "$timings"
}

function list_mode() {
    ensure_storage_dir

    {
        shopt -s nullglob
        for filename in "$storage_dir"/*.typescript; do
            local id

            id=$(basename "$filename" | grep -Eo "^[0-9]+")
            if [[ $? -eq 0 ]]; then
                local mdfile="$storage_dir"/"$id".metadata.txt
                local md_date=""
                local md_message="-"

                while IFS="=" read -r key value; do
                    case "$key" in
                        DATE) md_date="$value" ;;
                        MESSAGE) md_message="$value" ;;
                    esac
                done < "$mdfile"

                printf " %s\t%s\t%s\n" "$id" "$md_date" "$md_message"
            fi
        done
        shopt -u nullglob
    } | sort -g
}

function resume_mode() {
    ensure_storage_dir
    local id="$1"
    local typescript="$storage_dir"/"$id".typescript
    local timings="$storage_dir"/"$id".timings

    if [[ ! -f "$typescript" ]]; then
        echo "Can't resume: no script found for specified ID." >&2
        exit 1
    fi

    if [[ -f "$timings" ]]; then
        echo "Can't resume a script with timings enabled." >&2
        exit 1
    fi

    AUTOSCRIPT_ID="$id" script -f -a -q "$typescript"
}

function replay_mode() {
    ensure_storage_dir
    local typescript="$storage_dir"/"$1".typescript
    local timings_on="$2"

    if [[ ! -f "$typescript" ]]; then
        echo "No script found for specified ID." >&2
        exit 1
    fi

    if [[ "$timings_on" == "false" ]]; then
        cat "$typescript"
    else
        local timings="$storage_dir"/"$1".timings
        if [[ ! -f "$timings" ]]; then
            echo "No timings file found for specified ID (remove '-t' flag)." >&2
            exit 1
        fi

        scriptreplay -t "$timings" -s "$typescript"
    fi
}

function delete_mode() {
    ensure_storage_dir
    local typescript="$storage_dir"/"$1".typescript
    local timings="$storage_dir"/"$1".timings
    local mdfile="$storage_dir"/"$1".metadata.txt

    if [[ ! -f "$typescript" ]]; then
        echo "No script found for specified ID." >&2
        exit 1
    fi

    rm "$typescript"
    rm "$mdfile"
    rm -f "$timings"
}

function main() {
    assert_command_exists script
    assert_command_exists scriptreplay

    # Handle help and version flags first
    if [[ "$1" == "-v" ]]; then
        echo "$version"
        exit 0
    elif [[ "$1" == "-h" ]]; then
        print_usage
        exit 0
    fi

    local subcommand="$1"

    # Parse arguments
    local quiet="false"
    local timings="false"
    local message="-"
    local id=0
    local OPTIND=2

    while getopts ":qti:m:" opt; do
        case "$opt" in
            q)
                quiet="true"
            ;;
            t)
                timings="true"
            ;;
            i)
                id="$OPTARG"
            ;;
            m)
                message="$OPTARG"
            ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
            ;;
            \?)
                echo "Unknown option: -$OPTARG" >&2
                exit 1
            ;;
        esac
    done
    
    case "$subcommand" in
        record)
            if [[ -n "$AUTOSCRIPT_ID" ]]; then
                # Do not run autoscript inside autoscript
                exit 1
            fi

            record_mode "$quiet" "$timings" "$message"
        ;;
        list)
            list_mode
        ;;
        replay)
            if (( id <= 0 )); then
                echo "Replay mode: ID not specified" >&2
                exit 1
            elif [[ -n "$AUTOSCRIPT_ID" ]] && [[ "$AUTOSCRIPT_ID" == "$id" ]]; then
                echo "Specified script is being written by current session." >&2
                exit 1
            fi

            replay_mode "$id" "$timings"
        ;;
        delete)
            if (( id <= 0 )); then
                echo "Delete mode: ID not specified" >&2
                exit 1
            elif [[ -n "$AUTOSCRIPT_ID" ]] && [[ "$AUTOSCRIPT_ID" == "$id" ]]; then
                echo "Specified script is being written by current session." >&2
                exit 1
            fi

            delete_mode "$id"
        ;;
        resume)
            if [[ -n "$AUTOSCRIPT_ID" ]]; then
                echo "Can't resume: you are already inside an autoscript session." >&2
                exit 1
            fi

            resume_mode "$id"
        ;;
        context)
            if [[ -n "$AUTOSCRIPT_ID" ]]; then
                echo "$AUTOSCRIPT_ID"
            else
                echo "You are not inside an autoscript session." >&2
                exit 1
            fi
        ;;
        *)
            print_usage
            exit 1
        ;;
    esac
}

main "$@"
