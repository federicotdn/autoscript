#!/usr/bin/env bash
# autoscript: file management for script(1)

readonly storage_dir="${XDG_CONFIG_HOME:-"$HOME/.config"}/autoscript"
readonly version="0.1.1"
readonly storage_perms="700"
readonly file_perms="600"

set -e

function create_storage_dir() {
    if [[ -d "$storage_dir" ]]; then
        if [[ $(stat -c "%a" "$storage_dir") == "$storage_perms" ]]; then
            # Storage dir exists and has correct permissions
            return
        else
            echo "Storage directory exists, but has incorrect permissions." >&2
            exit 1
        fi
    fi

    mkdir "$storage_dir" -m "$storage_perms"
}

function print_usage() {
    echo "Usage: autoscript MODE [ID]"
    echo "Available modes: record, replay, stop, list, version, context"
}

function create_file() {
    if [[ -f "$1" ]]; then
        echo "File already exists: $1" >&2
        exit 1
    fi
    install -m "$file_perms" /dev/null "$1"
}

function record_metatada() {
    # Write context information to metadata file
    local mdfile="$1"
    {
        echo "DATE=$(date)"
        echo "SYSTEM=$(uname -r)"
        echo "USER=$(whoami)"
    } >> "$mdfile"
}

function record_mode() {
    create_storage_dir
    
    local quiet_on="$1"
    local timings_on="$2"
    local next_id=1

    # Search for the next ID to use by parsing filenames
    shopt -s nullglob
    for filename in "$storage_dir"/*.typescript; do
        local id

        id=$(basename "$filename" | grep -Eo "^[0-9]+")
        if [[ $? -eq 0 ]] && ((id >= next_id)); then
            ((next_id = id + 1))
        fi
    done
    shopt -u nullglob

    # Prepare typescript, metadata and timing files
    local typescript="$storage_dir"/"$next_id".typescript
    local timings="$storage_dir"/"$next_id".timings
    local mdfile="$storage_dir"/"$next_id".metadata.txt
    
    create_file "$typescript"
    create_file "$mdfile"

    if [[ "$timings_on" == "true" ]]; then
        create_file "$timings"
    fi

    record_metatada "$mdfile"

    if [[ "$quiet_on" == "false" ]]; then
        echo "This session is being recorded by autoscript."
        echo "Script file: $typescript"
        echo "Use autoscript stop, exit or CTRL+D to stop recording"
    fi

    if [[ "$timings_on" == "false" ]]; then
        timings="/dev/null"
    fi

    # Start script(1)
    AUTOSCRIPT_ID="$next_id" script -f -q -t "$typescript" 2> "$timings"
}

function list_mode() {
    create_storage_dir

    shopt -s nullglob
    for filename in "$storage_dir"/*.typescript; do
        local id

        id=$(basename "$filename" | grep -Eo "^[0-9]+")
        if [[ $? -eq 0 ]]; then
            local mdfile="$storage_dir"/"$id".metadata.txt
            echo "$id:"            

            while IFS="=" read -r key value; do
                echo "-> $key: $value"
            done < "$mdfile"
        fi
    done
    shopt -u nullglob
}

function replay_mode() {
    create_storage_dir
    local typescript="$storage_dir"/"$1".typescript
    local timings_on="$2"

    if [[ ! -f "$typescript" ]]; then
        echo "Script for specified ID not found!" >&2
        exit 1
    fi

    if [[ "$timings_on" == "false" ]]; then
        cat "$typescript"
    else
        local timings="$storage_dir"/"$1".timings
        if [[ ! -f "$timings" ]]; then
            echo "No timings file found for specified ID (remove '-t' flag)." >&2
            exit 1
        fi

        scriptreplay -t "$timings" -s "$typescript"
    fi
}

function main() {
    local subcommand="$1"

    # Parse arguments
    local quiet="false"
    local timings="false"
    local id=0
    local OPTIND=2

    while getopts ":qti:h" opt; do
        case "$opt" in
            q)
                quiet="true"
            ;;
            t)
                timings="true"
            ;;
            i)
                id="$OPTARG"
            ;;
            h)
                print_usage
                exit 0
            ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
            ;;
            \?)
                echo "Unknown option: -$OPTARG" >&2
                exit 1
            ;;
        esac
    done

    case "$subcommand" in
        record)
            if [[ -n $AUTOSCRIPT_ID ]]; then
                # Do not run autoscript inside autoscript
                exit 1
            fi

            record_mode "$quiet" "$timings"
        ;;
        list)
            list_mode
        ;;
        stop)
            if [[ -z $AUTOSCRIPT_ID ]]; then
                echo "You are not inside an autoscript session." >&2
                exit 1
            fi

            echo "Stopping current autoscript session..."
            kill -s SIGKILL "$PPID" 2>&1
            exit 1
        ;;
        replay)
            if (( id <= 0 )); then
                echo "Replay mode: ID not specified" >&2
                exit 1
            fi

            replay_mode "$id" "$timings"
        ;;
        version)
            echo $version
        ;;
        context)
            if [[ -n $AUTOSCRIPT_ID ]]; then
                echo "$AUTOSCRIPT_ID"
            else
                echo "You are not inside an autoscript session." >&2
                exit 1
            fi
        ;;
        *)
            print_usage
            exit 1
        ;;
    esac
}

main "$@"
